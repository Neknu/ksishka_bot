import telebot
import config

from telebot import types

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('static/hello.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ö—Å—é—à–∫–∞ ‚ù§")
    item2 = types.KeyboardButton("–î–∞–≤–∞–π –ø–æ—à–∞–ª–∏–º?üòè")

    markup.add(item1, item2)

    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç, {0.username}!\n–Ø - <b>{1.username}</b>, –±–æ—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–¥–µ–ª–∞–ª –î–∞–Ω—è –¥–ª—è –ö—Å—é—à–∫–∏".format(message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == '–ö—Å—é—à–∫–∞ ‚ù§':
            sti = open('static/rabbit.webp', 'rb')
            bot.send_sticker(message.chat.id, sti)
            bot.send_message(message.chat.id, '–í –º–æ–µ–º —Å–µ—Ä–¥–µ—á–∫–µ‚ù£')
        elif message.text == '–î–∞–≤–∞–π –ø–æ—à–∞–ª–∏–º?üòè':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–î—ã—ã—ã—ã—ã—ã", callback_data='yes')
            item2 = types.InlineKeyboardButton("–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –º–æ–ª–æ–¥–æ–π, –Ω–æ –≤–∂–∏–≤—É—é –∑–∞–¥–∞–º —Ç–µ–±–µ –∂–∞—Ä—Éüî•", callback_data='fire')

            markup.add(item1, item2)

            sti = open('static/mur_mur.webp', 'rb')
            bot.send_sticker(message.chat.id, sti)
            bot.send_message(message.chat.id, '–ö–æ–Ω–µ—á–Ω–æ –¥–∞–≤–∞–πüß°', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ù–∏–Ω–∞—é, —á—Ç–æ –Ω–∞ —Ç–∞–∫–æ–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ –ö—Å—é—à–∫–∞ - —Ç–æ–ø‚ù§‚ù§‚ù§')

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'yes':
                bot.send_message(call.message.chat.id, '–ê–†–†–†–†üòçüòçüòç')
                sti = open('static/archer.webp', 'rb')
                bot.send_sticker(call.message.chat.id, sti)
            elif call.data == 'fire':
                bot.send_message(call.message.chat.id, '–ñ–¥—É –Ω–µ –¥–æ–∂–¥—É—Å—åüòç')
                sti = open('static/kus.webp', 'rb')
                bot.send_sticker(call.message.chat.id, sti)

    except Exception as e:
        print(repr(e))

# RUN
bot.polling(none_stop=True)
